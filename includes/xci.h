#ifndef _XCI_H_
#define _XCI_H_

#include <switch.h>
#include "hfs0.h"


#define XCI_CERT_OFFSET 0x7000
#define XCI_INFO_OFFSET 0x190


/* This RSA-PKCS1 public key is only accessible to the gamecard controller. */
/* However, it (and other XCI keys) can be dumped with a GCD attack on two signatures. */
/* Contact SciresM for details, if curious. */
static const unsigned char xci_header_pubk[0x100] = 
{
    0x98, 0xC7, 0x26, 0xB6, 0x0D, 0x0A, 0x50, 0xA7, 0x39, 0x21, 0x0A, 0xE3, 0x2F, 0xE4, 0x3E, 0x2E, 
    0x5B, 0xA2, 0x86, 0x75, 0xAA, 0x5C, 0xEE, 0x34, 0xF1, 0xA3, 0x3A, 0x7E, 0xBD, 0x90, 0x4E, 0xF7, 
    0x8D, 0xFA, 0x17, 0xAA, 0x6B, 0xC6, 0x36, 0x6D, 0x4C, 0x9A, 0x6D, 0x57, 0x2F, 0x80, 0xA2, 0xBC, 
    0x38, 0x4D, 0xDA, 0x99, 0xA1, 0xD8, 0xC3, 0xE2, 0x99, 0x79, 0x36, 0x71, 0x90, 0x20, 0x25, 0x9D, 
    0x4D, 0x11, 0xB8, 0x2E, 0x63, 0x6B, 0x5A, 0xFA, 0x1E, 0x9C, 0x04, 0xD1, 0xC5, 0xF0, 0x9C, 0xB1, 
    0x0F, 0xB8, 0xC1, 0x7B, 0xBF, 0xE8, 0xB0, 0xD2, 0x2B, 0x47, 0x01, 0x22, 0x6B, 0x23, 0xC9, 0xD0, 
    0xBC, 0xEB, 0x75, 0x6E, 0x41, 0x7D, 0x4C, 0x26, 0xA4, 0x73, 0x21, 0xB4, 0xF0, 0x14, 0xE5, 0xD9, 
    0x8D, 0xB3, 0x64, 0xEE, 0xA8, 0xFA, 0x84, 0x1B, 0xB8, 0xB8, 0x7C, 0x88, 0x6B, 0xEF, 0xCC, 0x97, 
    0x04, 0x04, 0x9A, 0x67, 0x2F, 0xDF, 0xEC, 0x0D, 0xB2, 0x5F, 0xB5, 0xB2, 0xBD, 0xB5, 0x4B, 0xDE, 
    0x0E, 0x88, 0xA3, 0xBA, 0xD1, 0xB4, 0xE0, 0x91, 0x81, 0xA7, 0x84, 0xEB, 0x77, 0x85, 0x8B, 0xEF, 
    0xA5, 0xE3, 0x27, 0xB2, 0xF2, 0x82, 0x2B, 0x29, 0xF1, 0x75, 0x2D, 0xCE, 0xCC, 0xAE, 0x9B, 0x8D, 
    0xED, 0x5C, 0xF1, 0x8E, 0xDB, 0x9A, 0xD7, 0xAF, 0x42, 0x14, 0x52, 0xCD, 0xE3, 0xC5, 0xDD, 0xCE, 
    0x08, 0x12, 0x17, 0xD0, 0x7F, 0x1A, 0xAA, 0x1F, 0x7D, 0xE0, 0x93, 0x54, 0xC8, 0xBC, 0x73, 0x8A, 
    0xCB, 0xAD, 0x6E, 0x93, 0xE2, 0x19, 0x72, 0x6B, 0xD3, 0x45, 0xF8, 0x73, 0x3D, 0x2B, 0x6A, 0x55, 
    0xD2, 0x3A, 0x8B, 0xB0, 0x8A, 0x42, 0xE3, 0x3D, 0xF1, 0x92, 0x23, 0x42, 0x2E, 0xBA, 0xCC, 0x9C, 
    0x9A, 0xC1, 0xDD, 0x62, 0x86, 0x9C, 0x2E, 0xE1, 0x2D, 0x6F, 0x62, 0x67, 0x51, 0x08, 0x0E, 0xCF
};

static const unsigned char xci_header_key[0x10] = 
{
    0x01, 0xC5, 0x8F, 0xE7, 0x00, 0x2D, 0x13, 0x5A, 0xB2, 0x9A, 0x3F, 0x69, 0x33, 0x95, 0x74, 0xB1
};

typedef enum 
{
    CARTSIZE_1GB    = 0xFA,
    CARTSIZE_2GB    = 0xF8,
    CARTSIZE_4GB    = 0xF0,
    CARTSIZE_8GB    = 0xE0,
    CARTSIZE_16GB   = 0xE1,
    CARTSIZE_32GB   = 0xE2
} gamecard_size_t;

typedef enum
{
    GC_FIRMWARE_DEVELOPMENT = 0x00,
    GC_FIRMWARE_RETAIL_100  = 0x01,
    GC_FIRMWARE_RETAIL_400  = 0x02
} gamecard_firmware_version_t;

typedef enum
{
    GC_ACCESS_CONTROL_25MHZ = 0x00A10011,
    GC_ACCESS_CONTROL_50MHZ = 0x00A10010
} gamecard_access_control_t;

typedef enum
{
    COMPAT_GLOBAL   = 0x00,
    COMPAT_CHINA    = 0x01
} xci_region_compatibility_t;

typedef enum 
{
    UPDATE = 0x657461647075,
    NORMAL = 0x6C616D726F6E,
    SECURE = 0x657275636573,
} xci_partition;

typedef struct
{
    u64     firmware_version;
    u32     access_control;
    u32     read_time_1;
    u32     read_time_2;
    u32     write_time_1;
    u32     write_time_2;
    u32     firmware_mode;
    u32     cup_version;
    u8      compatibility_type;
    u8      _0x25[0x3];
    u64     update_partition_hash;
    u64     CUP_ID;
    u8      _0x38[0x38];
} xci_info_t;

typedef struct
{
    u8          header_sig[0x100];
    u32         magic;
    u32         secure_offset;
    u32         backup_offset;
    u8          title_key_dec_index;
    u8          gamecard_size;
    u8          header_version;
    u8          gamecard_flags;
    u64         package_ID;
    u64         cart_data_size;
    unsigned char reversed_iv[0x10];
    u64         hfs0_offset;
    u64         hfs0_header_size;
    unsigned char hfs0_header_hash[0x20];
    unsigned char crypto_header_hash[0x20];
    u32         security_mode;
    u32         t1_key;
    u32         key_index;
    u32         end_address;
    unsigned char encrypted_gamecard_info[0x70];
    xci_info_t   info;
} xci_header_t;

typedef struct
{
    u8      cert_sig[0x100];
    u32     magic;
    u32     _0x104;
    u8      kek_index;
    u8      padding2[0x7];
    u64     device_id;
    u8      unkown[0xA];
    unsigned char *encrypted_data[0xD0];
} xci_cert_t;

typedef struct
{
    u64     package_id;
    u8      _0x8[0x8];
    u8      auth_data[0x10];
    u8      auth_mac[0x10];
    u8      auth_nonce[0x10];
    u8      _0x2C[0x1C4];
} xci_initial_data_t;

typedef struct
{
    FILE            *f;         // only used if sd card install.

    hfs0_structs_t hfs0_root;   // root xci hfs0.
    hfs0_structs_t hfs0_update; // update partition.
    hfs0_structs_t hfs0_normal; // normal partition.
    hfs0_structs_t hfs0_secure; // secure partition.

    xci_header_t    header;     // see xci_header_t.
    xci_cert_t      cert;       // see xci_cert_t.
} xci_structs_t;


//
void xci_setup_install(const char *file_name, NcmStorageId storage_id, InstallProtocal mode);

#endif